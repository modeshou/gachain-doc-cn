#########
基本信息
#########

.. contents::
  :local:
  :depth: 3
  
**************************
什么是政务链（GAChain）?
**************************

政务链（GAChain）是构建数字生态系统的区块链平台。政务链（GAChain）平台是一个集成的应用程序开发环境，具有对数据，用户界面和智能合约的访问权限的多级系统。 政务链（GAChain）该平台是基于由智乾区块链科技有限公司（GAChain Technology Co.,Ltd）开发。

其底层结构和功能，政务链（GAChain）与现有的大多数区块链平台截然不同：

* 区块链应用程序的开发和使用在主权化软件环境中进行，称为 ``ecosystems(生态系统)`` 。每个生态系统都有其自己的成员规则，最初由生态系统创始人建立；
* 生态系统中的活动基于创建 ``注册`` 和记录或修改使用 ``智能合约`` 涉及到的数据，而在大多数其他区块链平台，活动基于交换帐户之间的交易或消息；
* 登录访问权限以及生态系统成员间的关系由一套智能法律的规则来管理。

*****************************
政务链（GAChain）区块链平台
*****************************

网络
==========================
政务链（GAChain）区块链平台是基于点对点网络开发。 网络的完整节点存储在最新版本的区块链和数据库中，并记录政务链（GAChain）平台的当前状态。 网络用户通过使用软件客户端（或REST API命令）从完整节点的数据库请求数据。 新数据以用户签署的交易形式发送到网络。 这种交易本质上是修改数据库中信息的命令。 事务以区块的形式存储，然后添加到网络节点上的区块链中。 将新的区块添加到区块链后，每个完整节点处理该区块中的事务，从而相应地更改其数据库中的数据。

验证节点
=========
网络中完整节点有权限形成区块的，称为验证节点。验证节点的数量是有限的，数量可以在政务链（GAChain）平台配置中设置 ``count_of_nodes`` 参数。 

验证节点列表以下列格式存储在 ``full_nodes`` 参数中：

*	[[“host1:port",”-1222","nodepub1"], ["host2:ip","-1222", "nodepub2"]]； 
*	host1:port – 主机的地址，事务和新区块被发送到该主机; 也可以从这个地址请求和接收整个块链（从区块#1开始）；
*	-1222 – 发送交易的时候处理收费的节点账户; 如果这个账户不存在，则不收取费用；
*	nodepub1 – 用于验证由此节点创建的区块签名的节点公钥。

交易
=====
交易由软件客户端或通过合约REST API命令形成，并且用户调用执行特定程序控制器 - 合约（“智能合约”）的数据，每笔交易具有以下格式：

* Type - 执行合约的ID；                                 
* Data - 传递给合约的参数；                          
* KeyID - 处理当前事务的用户的ID；         
* PublicKey - 用户的公钥（可选）；             
* BinSignatures - 交易签名；                        
* Time - 当前交易的时间；                               
* EcosystemD - 触发交易事务的生态系统的ID；         
* ТokenEcosystem - 生态系统的标识，用于交易付款的标识；
* MaxSum - 最高交易费用；
* PayOver - 在交易队列中优先处理的额外支付。
 
交易是由账户持有人的私钥签署。私钥和签名功能都可以存储在浏览器，软件客户端，SIM卡或专用物理设备上。在目前的实现中，私钥保存在由AES算法加密的Molis软件客户端中。交易使用ECDSA算法进行签名。

网络协议
========
事务由用户发送到其中一个验证节点，在那里进行基本验证以确保其格式正确，然后将其添加到事务队列中。该事务也会被发送到网络上的其他验证节点，在那里它也被添加到事务队列中。

节点在特定时刻有权根据 ``full_nodes`` 参数生成一个新区块，从队列中检索事务并将它们发送给区块生成器。在形成一个新的区块的同时，执行处理添加到这个区块中的事务：每个事务发送到虚拟机，该虚拟机执行具有参数的相应合约，在事务中传递，从而在数据库中修改数据。
 
每个新区块要进行检查识别错误，如果没有识别出错误，则将其发送到网络上的其他验证节点。

这个新接收的区块由验证节点添加到区块队列中。经过验证之后，新的区块被添加到区块链中，并且处理该区块中的事务，从而更新数据库。

区块和交易验证
=================
验证一个新的区块，在它创建了一个新的区块之后，由一个验证节点进行验证，并且在所有其他验证节点收到此区块后对该区块进行验证，包括以下检查:

*	第一个字节应该是 ``0``，如果不是，则接收的数据不被视为一个区块；
*	接收到的区块的生成时间戳应该在当前时间戳之前；
*	区块的生成时间应该符合验证该区块的节点有权签署新区块的时间间隔；
*	新区块的编号应该大于现有链上最后一个区块的编号；
*	不能超过该区块交易的总费用限额；
*	该区块应该用创建它的节点的 ``key`` 正确地签名;应该对以下数据进行签名：BlockID，前一个区块的 ``Hash、Time、full_nodes`` 中的位置，Block中所有事务的MrklRoot；
*	通过以下方式检查区块中的每个事务的正确性：
  
  *	每个事务的 ``Hash`` 应该是唯一的；
  *	不能超过用一个密钥签名的事务限制（max_block_user_tx）；
  *	事务大小不应超过（max_tx_size）；
  *	交易发送的时间不能大于区块形成的时间，并且不能小于区块形成时间减86400秒；
  *	交易应正确签署；
  *	被分配用于支付交易费用的 ``token`` 应该存在于 ``sys_currencies`` 列表中；
  *	执行合约的用户应该在其账户中有足够数量的通证（Token）来支付执行交易所需的费用。

政务链(GAChain)的数据库
=========================
政务链平台的统一数据库用于存储大量数据，并通过合约和用户界面快速检索数据，该数据库又称为寄存器。其副本在网络的每个完整节点上存储并保持最新。在形成新的区块及其区块链之外，政务链(GAChain)的所有完整节点同时更新数据库表。因此，数据库存储区块链的当前（最新）状态，这确保了所有完整节点上的数据的等同性，以及任何验证节点上的合约执行的明确性。当新的完整节点被添加到网络中时，其数据库的最新状态通过随后执行区块链中记录的所有交易来实现。

目前，政务链(GAChain)平台使用 ``PostgreSQL`` 作为其数据库管理系统。 

***************************
政务链(GAChain)的生态系统
***************************
政务链(GAChain)平台的数据空间分为许多相对独立的集群，即相对独立的生态系统，这使得其中的网络用户可以开展实施各种事务和活动。 政务链(GAChain)生态系统是一个自主的软件环境，由一定数量的应用程序和用户组成，通过用户创建的这些应用程序可以在不同的生态系统中做到协同办公。任何政务链(GAChain)帐户的所有者都可以创建新的生态系统。

生态系统的软件基础是应用程序的集合，这些应用程序是由 ``用户界面，智能合约和数据库表`` 组成。不同生态系统中组成应用程序的元素可以用 ``@+生态系统编号`` 表示（例如，@1name），其中生态系统的ID为 ``1`` 。在当前生态系统中，需要解决问题时，可以省略其前缀。 

Molis软件客户端可访问数据库管理工具，合约编辑器，界面编辑器以及在生态系统中创建应用程序所需的其他功能，无需借助其他任何软件模块。

只有在接收到用于访问其中一个生态系统（默认情况下，生态系统为#1）的私钥之后，用户才能成为政务链(GAChain)平台的用户。用户可以是多个生态系统的成员。如果需要在生态系统之间切换，可以使用软件客户端的专用菜单进行。

集成开发环境
============
Molis软件客户端包括用于创建区块链应用程序的全面集成开发环境（IDE）。即使软件开发人员没有深入了解区块链技术，依然可以快速的熟练使用IDE。 IDE由以下部分组成：

-	生态系统参数表；
-	合约编辑工具；
-	数据库表管理工具；
-	用户界面编辑器和可视化界面设计器；
-	语言资源编辑器；
-	应用程序导入/导出服务。

政务链(GAChain)应用程序 
=========================
政务链(GAChain)平台上的应用程序是具有配置数据表，合约和用户界面访问权限的的系统。这些应用程序可实现所有功能或各种服务

每个生态系统都为应用程序的开发创建一套属于自己的数据库表。但是，这并不排除通过在表名中指定某个生态系统的前缀来访问来自其他生态系统的表的可能性。数据库表不以任何方式被绑定，同时也不属于某个特定的合约，并且可以被所有应用程序调用。特定合约即智能法律，可以用于权限管理，通过配置访问权限来设置向表中输入数据的权限。

需要注意的是，政务链（GAChain）上的应用程序的设计和创建不要求软件开发人员了解网络及其底层协议，也不要求了解完整节点上数据库的区块链形成，以及如何同步的算法。在Molis软件客户端页面上，创建应用程序的元素，从表中读取数据，执行合约，这些和在本地计算机上使用软件环境的模块很相似。

生态系统的数据库表
====================
在政务链（GAChain）平台数据库中，可以为每个生态系统创建无限数量的数据库表。如上所述，特定生态系统的数据库表可以通过包含生态系统ID的前缀进行标识，该前缀在该特定生态系统中工作时，不会显示在软件客户端中。在访问权限配置为允许执行此类操作的情况下，可以在其他生态系统的表格中记录。

数据库表管理工具
-----------------
生态系统数据表的管理工具，可以从Molis软件客户端管理工具的表格菜单中进入。现已实现如下功能：

* 查看数据表及其内容的列表；
* 创建新数据表；
* 添加新的表列，并在列中指定数据类型： ``Text`` ， ``Date/Time`` ， ``Varchar`` ， ``Character`` ， ``JSON`` ， ``Number`` ， ``Money`` ， ``Double`` ， ``Binary`` ；
* 管理输入数据和更改表结构的权限。

数据表操作
------------
智语言（G Language）合约语言和乾语言（Chain Language）模板语言都具有 *DBFind* 函数，该函数提供从数据表中检索值和数据数组。合约语言具有： *DBInsert* 函数用于向表中添加行， *DBUpdate* 函数用于更改现有条目中的值。值被更改时，只有数据库表中的数据被重写，区块链附加新的事务，同时保留所有以前的事务。注意：根据区块链不可篡改的特性，数据表中的数据只可修改，不可删除。

为了最小化执行合约的时间， ``DBFind`` 函数 ``不能同时处理多个表`` ，因此 ``不支持JOIN`` 请求。这就是为什么规范化应用程序表是不可取的，而是将所有可用的信息包括到行中，从而复制其他表中可用的数据。这不仅仅是一种强制措施，而且是区块链应用程序的必要条件，在这种情况下，保存的内容（由私钥签名）应该是一个完整的数据（文档）。即使其他表中的值变动，该内容无法更改（这在关系数据库中是不可避免的）。

生态系统参数
===============
生态系统参数的查看和编辑，可以从Molis软件客户端的管理工具中的生态系统参数进入。生态系统参数可以分为以下几组：

-	常规参数：生态系统名称（ ``ecosystem_name`` ），描述（ ``ecos_description`` ），创建人或组织的账户（ ``founder_account`` ）等信息；
-	访问参数：定义了访问应用程序元素的特定权限（ ``changing_tables`` ，``changing_contracts`` ，``changing_page`` ，``changing_menu`` ， ``changing_signature`` ，``changing_language`` ）
-	其它参数：例如用户样式表（ *stylesheet* ），
-	生态系统的用户参数存储在应用程序工作所需的常量或列表中，以逗号分隔。

每个生态系统的参数可指定编辑权限。

为了检索某些生态系统参数的值，合约语言智语言（G Language）和模板语言乾语言（Chain Language）都具有 *EcosysParam* 函数，其中可以将生态系统参数名称指定为参数。要从列表中检索元素（作为生态系统参数输入并用逗号分隔），需指定所需元素的计数值作为函数的第二个参数。

 
政务链（GAChain）平台生态系统的参数
------------------------------------
政务链区块链平台的所有参数都存储在平台配置生态系统的参数表中。这些是以下参数：

* **default_ecosystem_page** - 默认新建生态系统的第一界面；
* **default_ecosystem_menu** - 默认新建生态系统的第一菜单；
* **default_ecosystem_contract** - 默认新建生态系统的第一合约；
* **gap_between_blocks** - 节点获取生成下一个区块权限的秒数，0< *gap_between_blocks* <86400;
* **new_version_url** - 用于检查新版本可用性的主机（服务器更新)；
* **full_nodes** - 可以生成区块的节点列表。它是[{"tcp_address":tcp主机IP，"api_address":主机IP，"key_id":帐户址，"public_key":公钥}]形式的列表清单；
* **number_of_nodes** - 全节点的最大数量。0< *number_of_nodes* <1000；
* **max_block_size** - 最大区块的大小（以字节byte为单位），*max_block_size*>0；
* **max_tx_size** - 每次事务最大的大小（以字节byte为单位），*max_tx_size*>0；
* **max_tx_count** - 每个区块最大的事务数，*max_tx_count*>0；
* **max_columns** - 用户创建表的最大列数，*max_columns*>0；
* **max_indexes** - 用户创建表的最大索引数，*max_indexes*>0；
* **max_block_user_tx** - 一个用户在每个区块中最大的事务数，*max_block_user_tx*>0；
* **max_fuel_tx** - 每次事务最大的燃料数，*max_fuel_tx*>0；
* **max_fuel_block** - 每个区块最大的燃料数，*max_fuel_block*>0；
* **commission_size** - 从每次事务中扣除事务费用的百分比。*commission_size*>= 0；
* **commission_wallet** - 根据当前生态系统收取事务费用的钱包地址。它是一对数组（生态系统的编号，账号地址）。例如，[["1"，"-943604719945132508"]]。有事务操作时，检查账号地址的有效性；
* **fuel_rate** - GAC与燃料的转化率。它是一对数组（生态系统编号，乘数）。例如，[["1"，"100000000000"]]。乘数必须大于0；
* **max_block_generation_time** - 区块生成的最大时间，（以毫秒ms为单位）；
* **extend_cost_（funcname）** - 调用内置函数的费用，*extend_cost_x* >=0;
* **（table|menu|contract|page|column|ecosystem）_price** - 创建数据表、菜单、合约、界面、字段、生态系统的费用，*x_price* >=0。

在程序级别的管理平台上，配置生态系统的参数，与管理任何其他生态系统的参数相同。与其他生态系统不同，生态系统参数管理的所有权限属于生态系统创建者，只能使用 ``UpdateSysParam`` 合约来执行政务链（GAChain）平台配置生态系统参数的更改，其管理是在平台的法律体系中定义。确定法律规则制度的特殊智能合约（智能法律），是在网络启动之前创建的，并实施白皮书“政务链（GAChain）平台法律制度”部分规定的权限和标准。

****************
访问权限控制机制
****************
政务链（GAChain）拥有多层次的访问权限管理系统。可以配置访问权限来创建和更改应用程序的任何元素，如合约、数据库表、接口页面和生态系统参数。访问权限的更改也可以配置。

默认情况下，政务链生态系统中的所有权限由其创建人管理（由 ``MainCondition`` 合约中定义，默认情况下，每个生态系统都有此合约）。但是，在创建专门的智能法律之后，访问权限控制可以转移给所有生态系统成员或一组成员。

控制操作
========
权限在合约，数据表和界面（页面，菜单和页面块）编辑器的 *Permissions* 字段中定义，可以用Molis管理工具获得。可以配置以下操作的权限：

1.	修改权限 - 更改表列中值的权限；
2.	插入权限 - 将新行添加到表格的权限；
3.	新增列的权限 - 添加新列的权限；
4.	更改数据表权限的条件 - 更改列的权限；
5.	变更智能合约的条件 - 编辑智能合约的权限；
6.	更改页面的条件 - 编辑界面页面的权限；
7.	更改菜单的条件 - 编辑菜单的权限；
8.	生态系统参数改变的条件 - 改变生态系统配置表中某个参数的权限。

管理权限的方法
=================
根据定义访问权限的规则，应把 ``智语言（G Language）`` 中的任意表达式输入到权限字段中。如果请求通过，那么访问将被授予。如果权限字段留空，则会自动设置为false，并阻止相关操作的执行。

定义权限的最简单方法是在权限字段中输入逻辑（布尔）表达式。例如， ``$member == 2263109859890200332`` ，其中给出了某个生态系统成员的ID。 

定义权限的最通用和推荐的方法是使用 ``ContractConditions`` 函数，可以将合约名称作为参数传递给该函数。该合约应包括使用数据表值（例如，用户角色表）和生态系统参数的表述的功能。

另一种权限管理方法是使用 ``ContractAccess`` 函数。执行相应操作的合约列表可以作为参数传递给 ``ContractAccess`` 函数。例如，如果我们列出生态系统标识中的账户的表格，并且输入金额列中的权限字段中的 ``ContractAccess("TokenTransfer")`` 函数，则仅允许改变金额列中的值的操作 ``TokenTransfer`` 合约（只能通过调用 ``TokenTransfer`` 合约才能执行账户间通证（Token）转移操作的所有合约）。访问合约本身的功能可以在条件部分进行管理。他们可能相当复杂，里面包括许多其他合约。

特定权限
========
为了解决对生态系统运行至关重要的冲突情况，生态系统参数表中有许多特殊参数（ ``changing_smart_contracts`` ， ``changing_tables`` ， ``changing_pages`` ），其中定义了获取访问任何智能合约，数据库表和页面的特定权限的条件。这些权限是使用特殊的智能合约来设定的，例如执行生态系统成员的投票或要求提供不同用户角色的签名。

*****************
虚拟专用生态系统
*****************

在政务链（GAChain）中，可创建虚拟专用生态系统（Virtual Dedicated Ecosystems，VDE）。虚拟专用生态系统具有标准生态系统的所有功能，但在区块链外工作。在VDE完整应用程序中，可使用合约和模板语言、数据库表，以及其他软件客户端功能来创建。也可使用API来调用区块链生态系统的合约。

请求Web资源
===========
VDE和标准生态系统之间的主要区别在于：可以通过使用 ``HTTPRequest`` 功能，通过 ``HTTP/HTTPS`` 从合约向任何网络资源发出请求。传递给该函数的参数是： ``URL`` ，请求方法（ ``GET`` 或  ``POST`` ），头部和请求参数。

读取数据权限
==============
由于 ``VDE`` 中的数据没有保存到区块链（但是可用于读取），它们可以选择配置读取数据表的权限。可以为单独的列设置读取权限，也可以为使用特殊合约的任何行设置读取权限。

使用VDE
========
VDE可用于创建注册表，并向用户的电子邮件或电话发送验证信息，将数据存储在公共访问之外，还可以编写和测试应用程序的工作，并将其进一步输出到区块链生态系统。此外，在VDE中，可以调用合约执行，这允许创建用于从Web接收数据并将其发送到区块链的 ``oracles`` （预言机）。

创建VDE
========
VDE可以在网络上的任何全节点（完整节点）上创建。由节点管理员定义允许使用特定生态系统功能的生态系统列表，并分配一个拥有生态系统创建者权限的用户，该用户有安装应用程序、审批新成员进入生态系统、配置访问生态系统资源的权限。

